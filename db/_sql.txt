SQL(Structed Query Language)
 - SQL은 DML, DDL, DCL의 세 종류로 분류됨
 - DML(Data Manipulation Language)은 데이터 조작어로 데이터의 조작(입력, 수정, 삭제, 검색)시 사용되는 언어
 	DML이 사용되는 대상은 테이블의 레코드들이며, 반드시 테이블이 존재해야 함
	insert, update, delete, select 등의 쿼리로 가장 많이 사용됨
 - DDL(Data Definition Language)은 데이터 정의 언어로 DB, 테이블, 뷰, 인덱스 등의 데이터베이스 객체를 생성, 수정, 삭제시 사용되는 언어
 	create, alter, drop 등의 쿼리로 개발 초기에 많이 사용됨
 - DCL(Data Control Language)은 데이터 제어 언어로 사용자에게 권한을 부여하거나 빼았을 때 사용되는 언어
	grant 등의 쿼리로 DBA가 주로 사용함

1. 테이블 관련 DDL
1) 테이블 생성
 - 테이블 생성시 고려해야 할 두 가지
 	테이블에서 하나의 레코드가 의미하는 바를 명확히 한 후 작업
	 - 예 : 회원테이블-한 명의 회원정보, 상품테이블-하나의 상품정보
	생성할 테이블의 기본키를 무엇으로 할 것인지 결정

create table 테이블명 (
	컬럼명1 자료형 [제약조건(들)],
	컬럼명2 자료형 [제약조건(들)],
	...,
	컬럼명n 자료형 [제약조건(들)],
	[기본키와 외래키의 제약조건(들)]
);
 - 제약조건 : 데이터의 무결성을 지키기 위한 제한된 조건을 의미
 	primary key 제약조건				-- 보통 많이 검색되는 것을 primary key로 적용
	 - 특정 컬럼을 기본 키(필수입력, 중복불가, 인덱스생성)로 지정하는 제약조건
	 - 사용법1(한 컬럼을 기본키로 지정할 경우)
	 	컬럼명 자료형 primary key
	 - 사용법2(여러 컬럼을 묶어서 기본키로 지정할 경우)
	 	테이블 생성 쿼리의 컬럼 정의 아래에 입력
		constraint 기본키명 primary key (기본키로 묶을 컬럼명들을 쉼표로 구분하여 입력)
		기본키명 : 해당 기본키에 붙이는 이름으로 DB전체에서 중복불가
		그래서 'pk_테이블명_컬럼명' 식의 기본키명으로 많이 사용함
	
	foreign key 제약조건
	 - 두 테이블 사이에 관계를 선언함으로써 데이터의 참조 무결성을 보장해주는 역할을 함		-- 참조무결성 : 참조할 때 결점이 없어야 한다 -> 참조하는 곳에 있는 정보여야 한다
	 - 사용법 : 테이블 생성문의 가장 아래에 다음과 같이 입력
	 	constraint 외래키명 foreign key (컬럼명) references 테이블명(참조컬럼명)
		외래키명 : 해당 외래키에 붙이는 이름으로 DB전체에서 중복불가('fk_테이블명_컬럼명' 식의 외래키명으로 많이 사용)
		컬럼명 : 외래키가 될 현 테이블의 컬럼명
		테이블명 : 외래키가 참조할 컬럼이 들어있는 테이블명
		참조컬럼명 : 외래키가 참조할 외부 테이블의 특정 컬럼명
		 - 참조하는 컬럼은 반드시 기본 키 또는 unique 제약조건을 가진 컬럼이어야 함

	auto_increment 제약조건
	 - int형 데이터에 사용하는 제약조건을 자동으로 값을 1씩 증가시키는 제약조건(일련번호 등에서 많이 사용됨)
	 - 유일하게 직접 값을 넣을 수 없는 제약조건으로 DB에서만 값을 넣을 수 있음
	 - 따로 PK로 지정할 컬럼이 없는 경우 PK로 사용되기도 함
	 - 중간에 번호가 삭제되면 그 번호는 계속 비어있게 됨
	 - 이 조건을 사용할 경우 unique 또는 PK를 사용해야 함
	 - 사용법
	 	컬럼명 int auto_increment
	 - 가장 최근에 입력된 일련번호 확인 쿼리
	 	select last_insert_id();

	unsigned 제약조건
	 - int형 데이터에 사용하는 제약조건으로 부호를 사용하지 않고 모두 양수로만 사용한다는 제약조건
	 - 양수로만 사용하므로 음수의 사용범위까지 사용할 수 있어 사용범위가 두 배로 늘어남
	 - 사용법
	 	컬럼명 int unsigned

	unique 제약조건
	 - 특정 컬럼에 중복불가 제약조건을 걸어줌
	 - 사용법
	 	컬럼명 자료형 unique
	
	default 제약조건
	 - 특정 컬럼에 대해 데이터를 입력하지 않을 경우 자동으로 들어갈 값을 지정해 놓는 제약조건
	 - 숫자나 문자열 등의 특정 값도 가능하지만 now() 등과 같은 함수로 사용할 수 있음
	 - 사용법
	 	컬럼명 자료형 default 기본값
		기본값 : 문자열이면 작은 따옴표로 묶어서 입력 - 빈 문자열도 가능('')
		기본값을 지정하지 않고 컬럼에 값을 넣지 않으면 무조건 null 값이 들어감

	null 제약조건
	 - 특정 컬럼을 비워둘 수 있게 할건지 여부
	 - 사용법
	 	컬럼명 자료형 null		-- 현 컬럼은 비워둘 수 있음(기본값)
		컬럼명 자료형 not null	-- 현 컬럼은 비워둘 수 없음(필수입력)

2) 테이블 수정
alter table 테이블명 [ 수정할 내용 ];
 - 컬럼추가
 	alter table 테이블명 add 컬럼명 자료형 제약조건 [first | after 컬렴명];
	 - first : 추가하려는 컬럼을 현 테이블의 첫번째 컬럼으로 추가하라는 의미
	 - after 컬럼명 : 추가하려는 컬럼을 지정한 컬럼 뒤에 추가하라는 의미

 - 컬럼명 및 자료형 변경
 	alter table 테이블명 change column 기존컬럼명 새컬럼명 자료형;
	 - 단, 컬럼에 대한 변경이 일어나지 않게 신경써야하며 변경시에도 주의해서 작업해야 함
	 - 자료형 변경시 더 작은 자료형으로의 변경은 불가

 - 컬럼의 제약조건 삭제
 	alter table 테이블명 drop [primary key | foreign key 외래키명];
	 - 해당 테이블에 있는 기본키나 외래키의 제약조건을 삭제

3) 테이블 삭제
drop table 테이블명;
 - 테이블의 데이터만이 아닌 테이블 자체를 삭제하므로 그 안의 데이터들도 같이 삭제됨
 - 관계가 설정되어 있는 테이블의 경우 삭제가 안될 수도 있으므로 삭제를 하려면 모든 관계를 끊고 작업해야 함

4) 임시 테이블
 - 임시 테이블은 잠시 동안만 사용하고 사라질 테이블을 의미하며, 뷰와는 상관없음
 - 삭제되는 시점
 	개발자가 직접 drop table로 삭제할 경우
	workbench 등의 db 프로그램을 종료할 경우
	MySQL 서비스가 종료되거나 재시작할 경우
 - 문법
create temporary table 임시테이블명 ( 컬럼들 정의 );
	일반 테이블과 문법은 동일하며 'temporary'만 붙여주면 됨

기타 다른 객체(view, stored procedure, trigger, cursor, function)에 대한 DDL은 각각 기능에 따라 따로 정리할 것임

2. DML
 - 데이터 조작어로 테이블이 존재해야 사용할 수 있음

1) insert 문 : 데이터 입력
 - 문법
insert into 테이블명 (컬럼명1[, 컬럼명2, ..., 컬럼명n]) values (값1[, 값2, ..., 값n]);
 - 지정한 컬럼명들과 값들의 개수와 순서가 정확히 일치해야 함
 - 지정한 컬럼들의 순서는 테이블에 등록된 순서와 달라도 상관없음

 - 테이블 안의 모든 컬럼에 값을 넣는 경우 컬럼명을 생략할 수도 있음(값은 테이블에 등록된 컬럼 순서대로 입력)
insert into 테이블명 values (값1[, 값2, ..., 값n]);

 - 다른 테이블에 있는 데이터를 가져와 insert할 수도 있음
insert into 테이블명 (컬럼명1[, 컬럼명2, ..., 컬럼명n]) select 문;

 - 다른 테이블에 있는 데이터를 가져와 insert하면서 테이블을 생성할 수도 있음
create table 테이블명 (select문);

2) update 문 : 데이터 수정
 - 문법
update 테이블명 set 컬럼명 = 값1 [, 컬럼명2 = 값2, ..., 컬럼명n = 값n] [where 조건];
 - 수정하는 컬럼의 순서는 테이블의 컬럼 순서와 무관
 - where절은 생략가능하지만 실제로는 거의 생략되는 경우가 없음(생략시 모든 레코드의 데이터가 수정됨)
 	where절의 경우 철저하게 조건을 검사해야 함(select문을 이용하여 검사하면 됨)
 - 수정시 다른 컬럼이나 본인 컬럼의 값을 참조해도 됨
	예) price = price * 0.9;		price = 1000 * qty;
 - DML 쿼리들 중 가장 느리며, 수정된 값은 되돌릴 수 없으므로 where절을 정확하게 지정하는 것이 중요함

3) delete 문 : 데이터 삭제
 - 문법
delete from 테이블명 [where 조건];
 - 테이블 내의 데이터를 삭제하는 명령으로 테이블 자체를 삭제하는 것이 아님
 - update문처럼 where절은 생략가능하지만 실제로는 거의 생략되는 경우가 없음(생략시 모든 데이터가 삭제됨)
 	where절의 경우 철저하게 조건을 검사해야 함(select문을 이용하여 검사하면 됨)
 - DML 쿼리들 중 가장 쉽지만 한 번 삭제하면 다시 되살릴 수 없으므로 주의해서 작업해야 함

: workbench에서는 update와 delete 사용시 실수를 줄이기 위해 where절에 기본키로 조건을 주지 않으면 동작되지 않도록 옵션이 선택되어 있으며 그 선택을 해제한 후 재접속해야 기본키 외에도 조건을 줄 수 있음
 - [Edit] -> Preferences -> SQL Editor 화면의 최하단 [Safe Updates ...] 체크박스 해제 후 재접속

 4) select 문 : 데이터 검색
  - 문법
 select [distinct] 컬럼명(들) 또는 *		-- 검색해서 추출할 컬럼명들 또는 전체 컬럼(*)
 from 테이블명(들)							-- 검색할 데이터들이 들어있는 테이블(들)
 [
	[left | right] join					-- 여러 테이블에서 검색할 경우 테이블들을 연결하는 명령
	where 조건(들)						-- 검색 조건(들) : 여러 개일 경우 and 또는 or로 묶어서 작업
	group by 컬럼명(들)					-- group by절에서 지정한 컬럼을 기준으로 묶어서 데이터를 추출(동일한 값끼리 그룹화)
	having 조건(들)						-- group by에 필요한 조건(들) : 주로 집계함수들을 사용
	order by 컬럼명(들) [asc : desc]		-- 정렬 기준으로 오름차순(asc : 생략가능), 내림차순(desc) 사용
	limit [시작 인덱스, ] 레코드 개수			-- MySQL 전용 명령으로 검색할 레코드의 위치 및 개수를 지정
 ]
  - distinct : 동일한 값을 가진 데이터는 하나만 가져오게 하는 명령어

  - select 절의 컬럼명이 너무 길거나, 동일하거나, 계산식일 경우 컬럼명을 임의로 변경하여 데이터를 추출할 수 있음
  	진짜 컬럼명이 변경되는 것은 아니며, 현 select문의 결과에서만 임시로 바뀌어 보임
	이렇게 임의로 컬럼명을 변경하는 것을 alias라 하며 '컬럼명 as 임시별칭'의 방법으로 별칭을 지정함
	그리고, 임시별칭을 지정할 때 'as'는 생략해도 무방함

 - order by절을 생략하면 PK를 기준으로 오름차순으로 정렬되며, 특정 컬럼명을 입력하면 그 컬럼을 기준으로 정렬됨
 	여러 컬럼명을 입력할 경우 왼쪽 커럼이 1차 기준이 되며, 그 후 적혀있는 순서대로 기준이 됨
	각 컬렴명의 뒤에 asc또는 desc로 오름차순과 내림차순을 정하는데 생략하면 자동으로 asc로 지정됨

 - limit는 MySQL 전용으로 다른 DBMS에서는 사용할 수 없으며, 시작 인덱스(0번 부터 시작)와 개수로 지정함
	시작인덱스는 생략 가능하며 생략시 첫번째 레코드부터 검색함(주로 게시판의 목록에서 사용됨)

 - select 문의 여러 옵션절들은 모두 생략 가능하나 사용시에는 반드시 순서를 지켜야 함