자료(data) : 세상에 존재하는 모든 것을 자료라 하며, 컴퓨터에 한해서는 입력할 수 있는 대지털 자료들로 한정지음

정보(information) : 자료들 중 쓸만한 것들을 가공하여 만들어낸 결과물로 컴퓨터의 사용 목적이기도 함

데이터베이스(database) : 자료들을 모아 놓은 집합으로 단순히 모아 놓는 것에 그치지 않고 나름의 규칙을 가지고 잘 정리해 놓은 것을 의미
 - 잘 정리되었다는 의미는 검색이 용이하도록 데이터들을 정리했다는 의미가 됨

DBMS(DataBase Management System)
 - DB를 관리 및 운영하는 프로그램으로 여러 명의 사용자나 응용프로그램이 공유하고 동시에 접근이 가능하도록 관리해주는 프로그램
 - 종류 : Oracle, MySQL, MS-SQL, MariaDB 등

1. DBMS의 종류
 - 계층형 DBMS(Hierarchical DBMS)
 	가장 처음 나온 DBMS 개념으로 1960년대에 시작되었으며, 각 계층은 트리 형태를 가지며 1:N 관계를 가짐
	단, 구축한 후 변경이 까다로워 검색은 빠르나 접근의 유연성이 부족하다는 단점이 있음

 - 망형 DBMS(Network DBMS)
	계층형 DBMS의 문제점을 개선하기 위해 1970년 시작되었으며 1:1, 1:N, N:N 관계가 지원되어 빠른 데이터 추출이 가능해졌으나 계층형과 마찬가지로 매우 복잡하여 개발자가 모든 구조를 이해해야만 개발이 가능하다는 단점이 있음

 - 관계형 DBMS(Relational DBMS)
	1969년 E.F.Codd라는 학자가 수학 모델에 근거하여 고안한 방식으로 RDBMS라고도 함
	RDBMS의 핵심 개념은 '데이터베이스는 테이블(table)이라는 최소 단위로 구성된다. 그리고, 이 테이블은 하나 이상의 열(column or field)로 구성되어 있다.'
	모든 데이터는 테이블에 저장되는 구조 
	다른 DBMS에 비해 쉽게 변화에 순응할 수 있는 구조이며, 유지보수 측면에서도 편리하다.
	대용량 데이터의 관리와 데이터 무결성을 보장해 준다.(각종 제약조건과 관계성을 통해 무결성을 확보할 수 있음)
	단, 시스템 자원을 많이 차지하여 시스템을 전반적으로 느려지게 함(하드웨어의 발전으로 큰 의미는 없음)
	
2. 테이블(table)
 - RDBMS의 기본 구성요소이며, 모든 데이터가 저장되어 있는 곳으로 RDBMS는 반드시 하나 이상의 테이블이 존재해야 함
 - 테이블은 하나 이상의 열(column or field)로 구성되어 있음
 	각 열은 특별한 경우가 아니면 데이터가 비어 있으면 안됨
	빈 컬럼을 만들지 않기 위해 하나의 테이블이 아닌 여러 개의 테이블로 나누어 저장함으로써 불필요한 공간의 낭비를 줄이고 데이터 저장의 효율성을 보장해야 함 : 이렇게 여러 테이블로 나누는 것을 '정규화'라고 함
	나누어진 테이블 간의 관계를 기본키(Primary Key, PK, 주키)와 외래키(Foreign Key, FK)를 사용하여 각 테이블의 컬럼간 관계를 맺어줌
 - 데이터가 저장된 테이블에서 결과를 얻고자 할 경우 sql을 사용하여 얻을 수 있음
 - 관계형 DB이므로 테이블간에 관계를 맺어 주는 것이 좋으나 필수는 아니어서 관계를 맺지 않는 경우도 있음(권장하지는 않음)

1) 테이블에서 사용되는 기능 및 용어
 - 열(column or field) : 테이블의 구성요소로 각 테이블에는 최소 하나 이상의 열이 존재해야 함
 	특정 종류의 데이터를 의미하는 용도로 사용되기도 함
 - 열의 이름 : 컬럼명으로 각 열을 구분하기 위한 이름으로 같은 테이블에서는 중복불가이며 서로 다른 테이블일 경우 중복가능

 - 행(row or record) : 실질적으로 사용가능한 데이터로 테이블의 한 행을 의미하며 record라는 용어를 많이 사용함

 - 데이터 타입(자료형) : 각 열에 지정될 자료의 자료형으로 정수, 실수, 날짜 문자열 등의 자료형이 존재함
	자바와는 다르게 문자열이 객체가 아니며 글자 개수를 제한할 수 있음

 - 기본키(Primary Key, PK, 주키)
	특징 : 중복불가, 필수입력, 인덱스 자동 생성(검색 속도 향상)의 세 가지 제약조건을 자동으로 가짐
	기본키는 테이블당 하나만 지정할 수 있으며, 필요에 따라 하나의 컬럼이 아닌 두 개 이상의 컬럼을 묶어서 기본키로 지정할 수 있음
	테이블마다 모두 기본키를 지정하라는 것이 권장사항이나 기본키 없이 생성되는 테이블도 존재함
	기본키는 테이블에서 레코드들을 구분하는 용도로 사용됨
	단, 기본키는 생성시 검색속도 향상을 위해 인덱스를 생성하므로 다른 기능인 입력, 수정, 삭제 시 느려진다는 단점도 있음

 - 외래키(Foreign Key, FK, 보조키)
	특징 : 증복허용, 필수입력
	두 테이블 간의 관계 생성시 만들어지는 키
	기본키와 다르게 한 테이블에서 여러 개의 다른 외래키를 지정할 수 있음
	외래키와 관계를 맺는 상대 테이블의 컬럼은 반드시 기본키여야 하며 관계를 맺는 순간 제약조건이 성립됨
	 - 외래키와 다른 테이블의 기본키가 관계를 맺어 1:N의 관계가 성립되는 순간 '참조 무결성'의 특징을 가짐
	 - 참조 무결성 : 외래키로 지정한 컬럼에 들어가는 데이터는 무조건 관계를 맺은 PK에 해당하는 컬럼의 값들 중 하나여야 함
		PK에 해당하는 컬럼의 값에 속하지 않거나 아예 값을 입력하지 않은 경우 참조 무결성에 위배되어 오류 발생

SQL(Structed Query Language : 구조적 질의 어)
 - 에스큐엘, 쿼리, 시퀄 등으로 불리우며 DBMS에 명령을 내리는 언어
 - sql은 DBMS 제작회사 별로 다른 부분도 있지만 표준이 있어 표준에 맞는 sql은 어떠한 DBMS에도 동일하게 동작함
 	단, 표준으로만 사용하기에는 한계가 있어 각 DBMS별 전용 명령어를 사용하기도 함
	Oracle은 PL/SQL, MS-SQL은 T-SQL, MySQL은 SQL이라 함
 - sql로는 객체의 생성, 수정, 삭제와 데이터의 입력, 수정, 삭제, 조회 등의 작업을 처리할 수 있음
 - 주석 : --
 - MySQL에서 대소문자 구분 안함
 - 객체 생성 쿼리
	객체 : DB, 테이블, 인덱스, 뷰, 스토어드(저장) 프로시저, 함수, 트리거, 커서 등을 의미
	문법 : create 객체종류 객체명 (내용);
	예) create table 테이블명 (
		컬럼명1 자료형 [제약조건(들)] [primary key],
		컬럼명2 자료형 [제약조건(들)],
		...,
		컬럼명n 자료형 [제약조건(들)],
		[기본키와 외래키의 제약조건(들)]
	);

 - 객체 수정 쿼리
 	문법 : alter 객체종류 객체명 내용;
	예) alter table 테이블명 [옵션들];

 - 객체 삭제 쿼리
 	문법 : drop 객체종류 객체명;
	예) drop table 테이블명;		-- 테이블  자체를 삭제하므로 그 안에 있는 데이터들도 삭제됨

 - 데이터 관련 쿼리
 	테이블 내부에 저장된 데이터에 직접적으로 영향을 주는 쿼리로 입력, 수정, 삭제, 검색 등의 쿼리가 존재함

	입력 : 특정 테이블에 새로운 레코드를 추가할 때 사용하는 쿼리
	 - 문법 : insert into 테이블명 (컬럼명1[, 컬럼명2, ..., 컬럼명n]) values (값1[, 값2, ..., 값n]);
	 - 추가할 컬럼명들이 테이블의 컬럼명 순서와 동일할 필요는 없으나 입력한 컬럼명들과 값들의 순서와 개수는 정확히 일치해야 함
	 - 입력, 수정, 삭제 중 가장 많은 오류가 발생하는 쿼리

	수정 : 테이블에서 특정 레코드(들)의 내용을 변경할 때 사용하는 쿼리
	 - 문법 : update 테이블명 set 컬럼명1 = 값1[, 컬럼명2 = 값2, ..., 컬럼명n = 값n] [where 조건];
	 - where절을 생략하면 해당 테이블의 모든 레코드들이 변경됨
	 	where절 없이 update문을 사용할 경우 다시 한 번 확인해봐야 함
	 - 입력, 수정, 삭제 중 가장 처리 속도가 느린 쿼리(수정을 할 때 삭제 후 입력하기 때문)

	삭제 : 테이블에서 특정 레코드(들)의 내용을 삭제할 때 사용하는 쿼리
	 - 문법 : delete from 테이블명 [where 조건];
	 - where절을 생략하면 해당 테이블의 모든 레코드들이 삭제됨
	 - delete는 drop이 아니므로 table을 소멸시키는 것이 아닌 그 안의 데이터들만 삭제하는 쿼리

	검색 : 테이블(들)에서 원하는 레코드(들)만 추출할 때 사용하는 쿼리
	 - 문법 : select 컬럼명(들) from 테이블(들) [where 조건 및 기타 옵션들];
	 - 가장 많이 사용하고, 가장 복잡한 쿼리이나 위험도는 가장 낮음

테이블 이외의 DB객체들
1) 인덱스(index)
 - 일종의 차례개념으로 테이블에 붙어서 검색속도 향상을 위해 사용됨 : 단, 입력, 수정, 삭제 시에는 느려짐
 - 변경이 잦거나, 입력 또는 삭제가 많이 발생하는 테이블의 경우 오히려 인덱스 때문에 느려질 수도 있음
 - 또는 검색결과가 지나치게 많으면 사용하지 않는 것이 오히려 좋음
 - 특정 컬럼을 PK로 지정하면 자동으로 인덱스가 생성됨

2) 뷰(view)
 - 일종의 가상 테이블로 기존의 원본 테이블(들)의 데이터를 조합하여 새롭게 생성
 - 뷰를 검색해도 테이블을 검색하는 것과 동일한 결과가 나타남
 - 속도 향상과 편이성 때문에 만들어진 객체로 테이블(들)에서 필요한 데이터들만 모아 출력하는 개념
 	복잡한 select 쿼리를 단순하게 만들어주는 장점도 있음

3) 스토어드 프로시저(stored procedure)
 - '저장 프로시저'라고도 하며 DB에 저장되어 있는 기능올 일종의 메소드와 같으며 직접 만들어 사용하기도 함
 - 일반 쿼리보다 처리 속도가 빠르며, 보안에 뛰어남(웹서버에서 처리할 일을 줄여주어 일반쿼리보다 빠름)
 	처리 속도는 일반 쿼리가 웹 서버에서 거의 작업되는 데 비해 스토어드 프로시저는 DB서버에서 주로 작업되므로 웹서버가 여우롭게 동작됨

4) 함수(function)
 - 스토어드 프로시저와 비슷하나 리턴 값이 존재함

5) 트리거(trigger)
 - 지정한 컬럼의 데이터에 입력, 수정, 삭제 등의 작업이 발생될 때 실행되는 코드를 의미
 - 단, 시스템을 많이 차지하는 부분이 있어 자주 사용되는 기능은 아님

6) 커서(cursor)
 - 테이블(들)에서 많은 양의 데이터를 추출하여 여러 조작을 하는 기능
 - 트리거와 마찬가지로 시스템을 많이 차지하는 부분이 있으며 자바에서의 기능이 더 뛰어나므로 자주 사용되는 편은 아님

MySQL에서의 자료형(datatype)
 - null : 컬럼에 데이터가 없는 경우로 0이나 빈 문자열도 아닌 값

숫자형식
 - DB에서는 숫자형 데이터에 문자열처럼 작은 따옴표로 묶어서 사용해도 정상적으로 동작함(연산도 가능)
정수
 - tinyint : 1byte. -127 ~ 128 까지의 정수 표현
 - smallint : 2byte. -32768 ~ 32747 까지의 정수 표현
 - mediumint : 3byte. -8388608 ~ 8388607 까지의 정수 표현
 - int : 4byte. 약 -21억 ~ 21억 까지의 정수 표현
 - bigint : 8byte. 약 -900경 ~ 9000경까지의 정수 표현
실수
 - float : 4byte. -3.40E + 28 - - 1.17E + 38. 소수점 아래 7자리까지 표현
 - double : 8byte. -1.22E + 308 - - 1.79E - 308. 소수점 아래 15자리까지 표현

문자열 형식 : DB에서는 문자열을 작은 따옴표로 묶음(큰 따옴표는 아무 기능도 없음)
 - DB에서는 문자열에 숫자(정수, 실수)나 날짜 등의 문자열이 아닌 데이터를 넣어도 정상적으로 동작함

 - char(n) : 1~255자의 문자를 표현하는 고정길이 문자형으로 속도가 빠름
 	n으로 지정한 수 만큼의 글자가 들어가며 숫자보다 글자수가 적으면 빈 공간으로 채움으로서 지정한 글자수를 유지

 - varchar(n) : 1~65535자의 문자를 표현하는 가변길이 문자형으로 속도는 char형 보다 느리나 text보다는 빠름
	varchar형으로 지정시 n의 값보다 적은 양의 문자열을 입력할 경우 남은 공간은 사라짐
	char형에 비해 공간 활용이 효율적임

 - tinytext : 1~255자의 text데이터
 - text : 1~65535자의 text데이터
 - mediumtext : 1~16777215자의 text데이터
 - longtext : 1~4294967295자의 text데이터(최대 4GB)
 	text계열 자료형들은 하드디스크의 빈 공간을 채우면서 데이터가 입력되기도 하므로 속도는 느리지만 공간을 절약함
	text계열 자료형들에는 거의 인덱스를 붙이지 않음

날짜/시간 데이터 형식
 - date : 3byte. 1001-01-01 ~ 9999-12-31까지 'yyyy-mm-dd'형식의 날짜만 저장
 - time : 3byte. -838:59:59.000000 ~ 838:59:59.000000까지 'hh:mm:ss"형식의 시간만 저장
 - datetime : 8byte. 1001-01-01 00:00:00 ~ 9999-12-31 23:59:59 까지 'yyyy-mm-dd hh:mm:ss'형식으로 저장
 - year : 1byte. 1901 ~ 2155까지 'yyyy'형식으로 저장
 	개발자에 따라 날짜/시간 데이터 형식을 따로 사용하지 않고 문자열로 처리하는 경우도 많음

BLOB 형식 : Binary Large Object - 이미지, 동영상, 문서파일 등의 대용량 이진 데이터
 - tinyblob : 1~255 크기의 blob데이터
 - blob : 1~65535 크기의 blob데이터
 - mediumblob : 1~16777215 크기의 blob데이터
 - longblob : 1~4294967295 크기의 blob데이터(최대 4GB)
 	파일을 DB에 저장할 때 사용하는 자료형이나 보통은 파일을 DB에 저장하지는 않음




기획회의 -> 스토리보드 -> DB모델링 -> 스토어드 프로시저 작업 -> 공용기능 작업 -> 각각 프로그래밍
관계설정을 할 경우 다른 정보들을 입력해야하므로 실제 작업할 때 관계설정을 테스트이후에 하거나 아예 하지 않는경우도 있음
관계설정을 하지 않을 경우 잘못된 정보가 들어갈 수도 있음(예를들면 있지도 않은 아이디에 포인트 적립)



