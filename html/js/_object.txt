객체(Object)
 - 객체는 속성(property)과 메소드(method)로 구성되어 있음
 	속성 : 객체를 특징 지어주는 값(자바에서의 멤버 변수/상수 개념)
	 - 속성값 변경 : 객체명.속성명 = 넣을 값;	속성값 추출 : 변수명  = 객체명.속성명;
	메소드 : 객체로 할 수 있는 작업(자바에서의 매소드이며 함수라고도 함)
	 - 메소드 사용 : 객체명.메소드명();

내장 객체
1. 배열
 - 여러 개의 데어트를 저장하기 위한 기능으로 하나의 이름으로 묶어서 사용
 - 배열 내에 저장된 데이터를 구분하기 위해 인덱스 번호가 존재함(0번 부터 시작)
 - 선언 및 생성법
 	리터럴 값을 이용한 배열 생성법 : 배열 선언과 동시에 데이터를 바로 입력하여 초기화하는 방법
	 - 문법 : var 배열명 = [값1, 값2, ..., 값n];
		예) var arrNames = ["홍길동", "전우치", ..., "임꺽정"];
	Array객체를 이용한 배열 생성법 : 데이터 없이 배열만 선언하고, 후에 데이터를 채워나가는 방법
	 - 문법 : var 배열명 = new Array(배열크기);
	 	new : 객체를 생성하는 명령어
		Array : 생성시킬 캑체가 배열임을 의미
		배열크기 : 배열에 저장할 데이터의 개수로 생략가능
	 - 배열의 개수를 먼저 지정하면 그 개수를 넘길 수 없지만 지정하지 않고 작업하면 나중에라도 추가할 수 있음
	 	보통의 일반 언어들에서는 크기를 배열 선언시 지정해야 하지만(자바 포함) 자바스크립트는 생략할 수 있음
	리터럴과 Array() 혼합방식
	 - 문법 : var 배열명 = new Array(값1, 값2, ..., 값n);

1-1. Array 객체
 - 배열 객체로서 배열에 여러 가지 속성과 메소드를 제공함
 - 실제 배열을 객체로 하여 사용할 수 있음
 - 속성
 	length : 배열의 크기(길이)로 배열의 마지막 인덱스 + 1의 값
 - 메소드
	1) toString(), join()
	 - 배열 안에 있는 데이터들을 연결하여 문자열로 변환시키는 메소드
	 - toString()은 쉼표로 각 요소의 값들을 구분지어 연결함
	 - join(구분자)은 지정한 구분자로 각 요소의 값들을 구분지어 연결함 : 구분자를 생략하면 쉼표로 구분함

	2) concat()
	 - 2개 이상의 배열을 하나의 배열로 묶어주는 메소드
	 - 문법 : 배열명.concat(합칠 배열1 [, 합칠 배열2, ... , 합칠 배열n]);

	3) push(), pop()
	 - 배열의 끝에 새로운 요소를 추가하거나(push()), 삭제(pop())할 때 사용
	 - 문법 : 배열명.push(추가할 데이터);	배열명.pop();

	4) indexOf()
	 - 배열에서 특정 데이터의 위치 인덱스를 찾아 리턴하는 메소드
	 - 문법 : 배열명.indexOf(찾는 값 [, 찾기 시작 인덱스]);
	 - 찾는 값이 두 개이상일 경우 첫번째 위치를 구함 - 두 번째 이상의 위치를 찾으려면 '시작 인덱스' 인수를 사용

	5) shift(), unshift()
	 - push()와 pop()과는 반대로 배열의 앞부분에 적용되는 메소드
	 - 문법1 : 배열명.shift();		// 해당 배열의 첫 요소가 삭제
	 - 문법2 : 배열명.unshift(추가할 값1 [, 추가할 값2, ... , 추가할 값n]);
			  // 지정한 값(들)을 배열의 앞부분에 끼워넣음

	6) splice()
	 - 지정한 요소들을 배열에서 삭제하는 메소드(삭제 후 추가할 수도 있음)
	 - 문법 : 배열명.splice(시작 인덱스, 삭제할 개수 [, 대체할 값1, 대체할 값2, ... , 대체할 값n]);
	 - 잘라낸 요소들로 새로운 배열을 만들고 원본에서는 삭제됨

	7) slice()
	 - 지정한 인덱스에 맞춰 배열의 일부를 복사하여 새로운 배열로 생성시킴
	 - 문법 : 배열명.slice(시작 인덱스 [, 종료 인덱스 - 1]);
	 - 복사한 요소들로 새로운 배열을 만들고 원본은 그대로 유지됨

	8) sort()
	 - 배열의 요소들을 코드값을 기준으로 오름차순 정렬시키는 메소드
	 - 문법 : 배열명.sort();

	9) reverse()
	 - 배열의 요소들을 코드값을 기준으로 내림차순 정렬시키는 메소드
	 - 문법 : 배열명.reverse();

	10) delete 연산자
	 - 메소드는 아니나 특정 요소를 삭제하는 기능으로 요소의 자리는 유지함
	 - 문법 : delete 배열명[삭제할 요소의 인덱스];

2. String 객체
 - 문자열 객체로 문자열을 추출하거나 조작, 검색하는 등의 기능을 제공
 - 자바스크립트에서는 작은 따옴표와 큰 따옴표의 구분없이 모두 문자열로 취급 : 자바의 char형 자료형은 없음
 - 원본 문자열을 변경하는 메소드는 없고 변경한 새로운 문자열을 리턴하는 방식으로 동작함
 - 객체 생성법
	var 객체명 = new String("문자열");	또는	var 객체명 = "문자열";
	대부분 두번째 방법을 사용함
 - 속성
	length : 문자열 내의 문자 개수(자바에서는 메소드이나 자바스크립트에서는 속성으로 작업됨)

 - 메소드
	1) charAt(), charCodeAt()
	 - 문자열에서 지정한 특정 위치의 문자를 추출하거나 유니코드 값을 리턴하는 메소드
	 - 문법1 : 문자열.charAt(인덱스) : 문자열에서 지정한 인덱스에 있는 문자 하나를 리턴
	 - 문법2 : 문자열.charCodeAt(인덱스) : 문자열에서 지정한 인덱스에 있는 문자의 유니코드값을 리턴
	 - 인덱스 범위를 벗어나면 charAt()은 빈 문자열을 charCodeAt()은 NaN(not a number)을 리턴

	2) indexOf(), search(), lastIndexOf()
	 - 모두 문자열에서 지정한 특정 문자열의 위치를 찾아 인덱스 번호를 리턴하는 메소드
	 - 문법1 : 문자열.indexOf("찾는 문자열" [, 시작 위치]);
	 - 문법2 : 문자열.search("찾는 문자열");
	 - 문법3 : 문자열.lastIndexOf("찾는 문자열" [, 시작 위치]);
	 - 특정 문자열이 존재하는지 여부를 판단하는 데에도 사용되며, 모두 찾지 못했을 경우 -1을 리턴
	 - lastIndexOf()는 뒤에서 부터 찾기 시작하므로 찾는 문자열이 마지막으로 나오는 위치가 필요할 때 사용

	3) match()
	 - 지정한 문자열을 찾아 있으면 리턴, 없으면 null을 리턴
	 - 문법 : 문자열.match("찾는 문자열");

	4) replace()
	 - 특정 문자열을 찾아 지정한 문자열로 변경하여 새로운 문자열로 리턴하는 메소드
	 - 문법 : 문자열.replace("찾는 문자열", "바꿀 문자열");
	 - 원본은 변하지 않음

	5) split()
	 - 문자열을 지정한 구분자를 기준으로 배열로 리턴하는 메소드
	 - 문법 : 문자열.split("구분자");

	6) slice(), substring(), substr()
	 - 문자열의 일부를 잘라내어 리턴하는 메소드
	 - 문법1 : 문자열.slice(n [, m]) : 문자열을 n부터 m-1까지 자름(m이 없으면 끝까지 자름)
	 - 문법2 : 문자열.substring(n [, m]) : 문자열을 n부터 m-1까지 자름(m이 없으면 끝까지 자름)
	 - 문법3 : 문자열.substr(n [, m]) : 문자열을 n부터 m개를 자름(m이 없으면 끝까지 자름)
	 - 자바에서는 substring()만 존재하므로 substring()을 사용하는 것이 좋다.

	7) toLowerCase(), toUpperCase()
	 - 문자열의 영문을 각각 소문자와 대문자로 변환시키는 메소드
	 - 문법1 : 문자열.toLowerCase() : 문자열 중 영문 대문자를 소문자로 변경
	 - 문법2 : 문자열.toUpperCase() : 문자열 중 영문 소문자를 대문자로 변경

3. Date 객체
 - 자바스크립트에서 사용하는 날짜/시간 관련 객체로 문자열이나 숫자로도 표현가능
 	숫자 표현은 1970-01-01 00:00:00 부터 밀리 초로 계산된 시간값을 의미
 - 자바스크립트는 기본적으로 밀리초가 기준이 됨

 - 객체 생성
	new Date() : 오늘 날짜 및 현재 시간으로 Date 객체 생성
	new Date(year, month, day) : 지정한 연월일로 Date 객체 생성
	new Date(year, month, day, hour, minute, second, millisecond) : 지정한 연월일 시분초밀리초로 Date 객체 생성

 - 메소드
	1) get 메소드 : 날짜/시간 데이터에서 원하는 데이터만 추출하는 메소드들
	 - getDate() : 일(day, 1~31) 부분 추출
	 - getDay() : 요일(0~6, 0이 일요일) 부분 추출
	 - getFullYear() : 연도를 4자리 숫자로 추출
	 - getHours() : 시간(0~23)dmf 24시간제로 추출
	 - getMilliseconds() : 밀리초를 추출
	 - getMinutes() : 분(0~59)을 추출
	 - getMonth() : 월(0~11, 0이 1월)을 추출
	 - getSeconds() : 초(0~59)를 추출
	 - getTime() : 1970-01-01 00:00:00 부터 밀리 초로 계산된 시간값

	2) set 메소드 : 날짜/시간 데이터에서 원하는 데이터만 변경하는 메소드들
	 - setDate(day) : 일(day, 1~31) 부분 변경
	 - setFullYear(year) : 연도를 4자리 숫자로 변경
	 - setHours(hour) : 시간(0~23)dmf 24시간제로 변경
	 - setMilliseconds(milli) : 밀리초를 변경
	 - setMinutes(minute) : 분(0~59)을 변경
	 - setMonth(month) : 월(0~11, 0이 1월)을 변경
	 - setSeconds(second) : 초(0~59)를 변경
	 - setTime(time) : 1970-01-01 00:00:00 부터 밀리 초로 계산된 시간값 변경

4. Math 객체
 - 숫자에 대한 수식 작업을 위한 객체
 - 객체 생성 후 메소드를 사용하는 타 객체와 달리 Math.메소드명() 의 형식으로 사용하면 됨
 - 메소드
 	abs(x) : 지정한 x의 절댓값을 리턴
	ceil(x) : 지정한 x의 올림값을 리턴
	floor(x) : 지정한 x의 내림값을 리턴
	max(x1, x2, ..., xn) : 지정한 숫자들 중 최댓값 리턴
	min(x1, x2, ..., xn) : 지정한 숫자들 중 최솟값 리턴
	pow(x, y) : x의 y승
	random() : 0이상 1미만의 난수 리턴
	round(x) : 지정한 x의 반올림값을 리턴
