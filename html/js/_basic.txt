자바 스크립트(Java Script)
 - 웹 페이지에 동적인 움직임을 부여하는 언어로 자바와는 상관없음(DHTML : Dynamic HTML)
 - 자바 스크립트는 클라이언트(사용자)의 웹브라우저에서 동작함(자바는 웹서버에서 동작함)
 - 스크립트 언어로는 VBScript와 JScript도 있으나 IE 전용이므로 사용하지 않음
 - 자바와 같이 하나의 명령이 종료되면 반드시 세미콜론(;)을 입력해야 함
 - 자바와 다르게 변수나 객체 선언시 자료형을 별도로 지정하지 않고 var라는 명령어로 선언 및 생성함
 - 자바 스크립트에서 HTML 요소의 내용, 속성, 스타일 등을 변경할 수도 있음

자바 스크립트와 HTML 문서의 연결
 - 인라인 방식 : html 요소와 이벤트 속성 등에서 직접 입력(간단한 명령이나 특정 함수를 호출함)
 - 내부파일 방식 : <script>태그를 사용하여 문서 내부에서 입력
 - 외부파일 방식 : 따로 '~.js' 파일을 만들어 해당 HTML 문서에서 불러들여 사용

자바 스크립트의 변수(Variable)
 - 특정 값 또는 객체를 지정하기 위한 메모리 상의 공간을 의미
 - 변수는 값이 바뀔 가능성이 있는 경우에 사용하게 됨
 	값을 사용할 때 값이 변경될 가능성이 조금이라도 있으면 반드시 변수에 넣어서 사용해야 함
	특별한 경우가 아니면 값을 직접 입력하여 사용하는 경우는 없음
 - 변수 선언시 따로 자료형은 선언하지 않고 'var'라는 명령어로 선언함
 	선언하지 않고 사용해도 오류가 발생하진 않으나 선언해서 사용하는 것이 좋다.
 - 변수명 명명 규칙 : 자바와 동일
	지켜야 할 규칙
	 - 변수명은 영문, 한글, 숫자, 언더바만으로 지정해야 함
	 - 명령어를 이름으로 사용할 수 없음
	암묵적인 규칙
	 - 한글로는 될 수 있으면 이름짓지 말아야 함
	 - 첫글자는 영문 소문자로 하고, 여러 단어의 조합일 경우 각 단어별 첫글자를 대문자로 표기
	 - 길더라도 의미있는 영단어를 사용해야 함(변수명으로 값의 종류가 유추되어야 함)
	 - 변수에 들어가는 값이 boolean이면 변수명의 시작을 is로 함
 - 변수의 적용범위에 따라 지역변수와 전역변수로 나뉨
 	지역변수 : 함수내에서 선언한 변수로 함수 내부에서만 사용되며 함수의 실행이 끝나면 소멸됨
	전역변수 : 함수의 외부에서 선언한 변수로 페이지 전체에서 사용가능(함수내에서도 사용가능)
	 - 전역변수는 페이지를 이동할 경우 소멸됨
 - 선언법 : var 변수명 = 값;

자바 스크립트에서의 자료형(data type)
 - 기본자료형 : number(정수 & 실수), string(문자열), boolean(논리값, 부율형)
 - 복합자료형 : object(객체), array(배열), function(함수) 등	// 자바에서의 객체와는 다름
	하나가 아닌 여러 개의 데이터 묶음이거나 수식들을 포함한 개념
 - 특수자료형 : undefined(정의되지 않은 상태를 의미). null(널, 객체가 비어있는 경우)

연산자(Operator)
증감연산자 : ++ --
 - 단항 연산자로 해당 변수의 값을 1씩 증가 또는 감소 시킴
 - prefix(앞에 붙임, 증감 후 사용)와 postfix(뒤에 붙임, 사용 후 증감)에 따라 값이 1 차이날 수 있음
 	실제 사용시에는 증감부분과 사용부분을 나누어 입력하는 것이 좋을 수도 있다.
	예1) n1 = ++n2; -> n2++; n1 = n2;	// n2의 값을 1증가 후 n1에 넣음
	예2) n1 = n2++; -> n1 = n2; n2++;	// n2의 값을 n1에 넣은 후 1증가

산술연산자 : + - * / %
 - 숫자를 연산하는 연산자로 결과도 숫자로 나옴
 - % : 나머지 연산자로 나눗셈 후 묷이 아닌 나머지를 구함
 - + : 산술연산의 덧셈과 문자열 연결의 두 가지 기능을 가짐
 
비교연산자 : == === != !== > >= < <=
 - 두 값을 비교하는 연산자
 - 피연산자
	== === != !== : 모든 값, > >= < <= : 숫자
 - 결과값은 무조건 논리값으로 조건에서 주로 사용됨
 - == : 값을 비교하여 같으면 true, === : 값과 자료형을 비교하여 둘 다 같으면 true
 - != : 값을 비교하여 다르면 true, !== : 값과 자료형을 비교하여 하나라도 다르면 true
 
논리연산자 : && || !
 - 두 개 이상의 조건식을 연산해 주는 연산자

대입연산자 : = += -+ *= /= %=
 - 변수에 특정 값을 (연산하여) 대입해주는 연산자

조건연산자 : (조건식) ? 값1 : 값2;
 - 삼항연산자라고도 하며, 조건식을 판단하여 필요한 값을 받아옴

연산자들의 우선순위
() []
! ++ --
* / %
+ -
< <= > >=
== === != !==
&&
||
= += -= *= /= %=

제어문
 - 자바스크립트나 자바를 포함한 모든 프로그래밍 언어들은 기본적으로 위에서 아래로, 왼쪽에서 오른쪽으로 실행되며, 특정 제어문을 통해 그 순서를 바꿀 수 있음
 - 제어문에는 분기문과 반복문의 두 가지가 존재함
 - 제어문의 실행문은 중괄호 안에 입려하나 실행문이 하나일 경우 중괄호를 생략할 수 있음

분기문
 - 조건을 주어 해당 조건이 참일 경우 특정 작업을 시키고, 거짓이면 다른 작업을 시키는 제어문
 - 하나의 조건으로 두 종류 이상의 일을 각각 시키는 제어문으로 if와 switch 문이 있음
 - 언어에 따라 조건연산자도 분기문으로 분류하기도 함

if 문
 - 가장 대표적인 분기문으로 모든 제어문들 중 가장 많이 사용됨
 - 다른 분기문인 switch의 기능을 완벽하게 대체할 수 있어 if문만을 사용할 수도 있음
 - 문법
if (조건식) {
	실행문;
} [
else if (조건식2) {
	실행문2;
} else if (...) {
	...;
} else if (조건식n) {
	실행문n;
} else {
	모든 조건이 거짓일 경우 실행할 실행문;
} ]
 - else 조건은 모든 조건이 거짓인 경우를 의미하며 그 범위가 대체로 if의 조건보다 큰 경우가 많다.
	else 절은 사용하면 if문의 실행문들 중 하나가 반드시 실행됨
	else 절이 없으면 if문의 실행문 들 중 하나도 실행되지 않을 수도 있음
 - if문의 중괄호 안에서 다른 if문을 사용할 수 있음
 	내부의 if문은 자동으로 겉의 if문 조건이 참인 상태로 동작하게 됨
	if (조건) {
		[실행문;]
		if (조건) {	// 겉의 if문 조건이 참인 상태에서 다른 조건을 추가하여 작업
			실행문;
		}
		[실행문;]
	} else {
		[실행문;]
		if (조건) {	// 겉의 if문 조건이 거짓인 상태(else가 참)에서 다른 조건을 추가하여 작업
			실행문;
		}
		[실행문;]
	}

switch 문
 - if문과 마찬가지로 조건에 따라 특정 위치로 분기시키는 제어문
 - 단, 조건식이 아닌 값을 비교하여 분기함
 - 문법
	switch (비교값) {
		case 값1 :
			비교값이 값1일 경우 처리할 실행문;	break;
	[
		case 값2 :
			비교값이 값2일 경우 처리할 실행문;	break;
		...
		case 값n :
			비교값이 값n일 경우 처리할 실행문;	break;
		default :
			비교값과 동일한 값이 없을 경우 처리할 실행문;
	]
	}
 - default는 if문의 else와 같은 역할을 함
 - 비교값은 정수, 실수, 문자열을 입력할 수 있음(자바에서는 실수는 불가)
 - case는 여러 개를 한 줄에 입력할 수 있음 (case 값1 : case 값2 : ...)
	여러 개의 case를 한 줄에 입력하면 or로 묶는 효과를 가짐
 - 각 case별로 break 명령을 해야 특정 실행문만을 실행시키게 됨
	break없으면 해당 실행문의 아래쪽 실행문들도 모두 실행시킴

반복(Loop)문
 - 조건이 참일 동안 실행문(들)을 반복해서 실행시키는 제어문
 - 주의할 점은 조건이 계속 참이면 실행문을 끝없이 실행하게 됨(무한루프)
	서버에서 동작하는 자바에서는 무한루프를 사용하지 않지만 클라이언트에서 동작하는 자바스크립트에서는 필요에 따라 무한루프를 사용할 수도 있음(극히 드문 경우)
 - 반복문에는 for, while, do-while의 세가지가 있음
 - 반복문 안에서 다른 반복문을 또 사용할 수 있음(세가지 반복문을 섞어서 사용해도 무방)
	중첩 반복문이라 하며 사용시 속도에 대한 주의를 해야 함
 - for와 while문은 조건이 거짓일 경우 한 번도 실행되지 않을 수도 있음

for문
 - 루프를 돌릴 횟수가 정해져 있는 경우 많이 사용됨(주로 배열에서 많이 사용됨)
 - 문법
	for (변수 선언 및 초기화 ; 조건식 ; 증감식) {
		실행문;
	}
 - 실행순서 : 변수 선언 및 초기화 -> 조건식 -> 실행문 -> 증감식 -> 조건식 -> 실행문 -> 증감식 -> ...
	변수 선언 및 초기화는 처음 한 번만 실행되며, 처음 실행시 증감식을 동작하지 않고 두번째 부터 동작함

for-in문
 - for문의 변형으로 배열 전용으로 사용하기 위한 루프문이며, 자바의 for-each문과 비슷
 - 문법
	for (변수 선언 in 배열명) {
		실행문;
	}
 - 선언한 변수에 지정한 배열의 인덱스를 0번 부터 마지막 인덱스까지 차례로 들어가서 사용할 수 있게 됨
 - 자바스크립트 전용 반복문으로 사용빈도가 높지는 않음

while문
 - 반복할 횟수를 정확히 모를 경우 사용되는 반복문
 - for문과 마찬가지로 조건이 참일 동안 실행문을 반복 실행시킴
 - 문법
	while (조건식) {
		실행문;
	}

do-while문
 - while문의 파생형으로 거의 동일한 작업을 함(첫 조건이 참이면 while문과 동일)
 - 단, do-while은 조건 검사를 실행문 실행 후 검사하므로 무조건 최초 한 번은 실행됨
	조건이 처음부터 거짓이어도 한 번은 실행됨
 - 문법
	do {
		실행문;
	} while (조건식);

break 명령어
 - 각종 제어문에서 실행을 멈추고 빠져나오는 기능
 - 문법 : break;		// 해당 블록(중괄호)을 빠져나옴

continue 명령어
 - 반복문에서 현재 실행되고 있는 실행문을 멈추고 다시 반복문의 조건으로 이동하게 하는 기능
 - 문법 : continue;	// continue 아래에 있는 명령들을 실행하지 않고 조건으로 이동
