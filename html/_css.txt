CSS(Cascading Style Sheets)
 - HTML 만으로는 웹 문서를 다양하게 꼬미거나 변경하는 데 제약이 있어 이를 보완하려 만들어진 기능
 - 웹 표준의 대두 이전에는 주로 문서를 꾸며주는 역할로만 사용되어 그 쓰임새가 한정적이었음
 - 웹 표준의 대두 이후에는 꾸미는 역할 말고도 레이아웃 지정 및 조절 기능과 꾸미는 모든 기능에 대해 스타일 시트를 사용함
 	기존에 태그로 했던 꾸밈 작업들도 이제는 css를 이용하여 작업하게 됨
 - 스타일 시트를 사용하면 사이트 제작시에나 제작 후 유지 보수시 간편하게 작업이 가능함
 - 스타일 시트는 크게 '선택자'와 '선언부'로 나누어 짐
	선택자 : 스타일을 적용할 대상을 지정하는 값(특정 태그나 범위 등을 의미)
	선언부 : 선택자로 지정된 범위에 적용할 스타일 속성과 값을 의미
	문법) 선택자 { 속성명1:값1; 속성명2:값2-1 값2-2 값2-3; ... 속성명n:값n; }
	 - 속성이 두 개 이상일 경우 반드시(;)으로 구분하며, 속성이 하나이거나 마지막 속성이면 세미콜론 생략가능
	 	한 속성의 값이 두 개 이상일 경우 띄어쓰기로 구분하여 입력하면 됨
	 - 속성의 이름은 HTML과는 다르게 단어를 줄이지 않고 풀네임으로 짓는 경우가 많으며 두 단어 이상일 경우 하이픈(-)으로 연결하여 사용
	 	예) bgcolor (html속성명) -> background-color (css속성명)
 - 주석 : 자바의 여러 줄 주석과 동일하여 '/*' 부터 '*/'까지를 주석으로 취급함

CSS 적용방식
1. 인라인(inline) 방식
 - html태그의 style 속성을 이용하여 직접 스타일 시트를 지정하는 방식
 - 가장 우선순위가 높은 방식이며, 태그에 직접 입력되었기 때문에 알아보기가 쉬움
 - 단, 스타일 변경 시 style 속성을 사용했던 태그로 다시 와서 작업해야 하기 때문에 번거로움
 	동일한 작업을 한 여러 태그에도 똑같이 다시 작업해야 함
	그러므로 한 번만 사용하거나 급하게 작업해야 할 경우가 아니면 사용을 자제해야 함
 - 예) <태그명 style="스타일 시트 내용">...</태그명>

2. 내부(internal) 방식
 - html문서 내부에서 스타일 시트를 입력하는 방식으로 <style> 태그를 사용
 - 해당 문서 전체에 영향을 미칠 수 있어 인라인 방식보다 넓은 적용범위를 가짐
 - 문서 내부 어디에서든 사용할 수 있으나 일번적으로 <head> 태그 내에서 입력
 - 예) <style> 스타일 시트 내부 </style>

3. 외부(external 또는 linking) 파일 방식
 - 스타일 시트를 담은 파일(파일명.css)을 따로 생성하여 그 파일을 해당 html문서에 연결하여 사용하는 방식
 - 첫 실행시 가장 느린 방식이나 두 번째 부터는 이미 받은 파일을 실행하므로 빨라짐
 - 유지 보수시 간편하게 작업할 수 있으나, css파일에 대해 정확히 알고 있어야 가능
 - 실무에서 가장 많이 사용되는 방식으로 정의된 스타일의 적용범위가 가장 넓음
 - 예)
 	1) <link type="text/css" rel="stylesheet" href="경로 및 css파일명" />
	2) import 방식
		<style type="text/css">
			@import url("경로 및 css파일명");
		</style>
	단, 속도가 link 태그 이용방식이 더 빠르므로 link 태그를 이용한 방법을 권장
 - css 파일내부에 다른 css파일을 불러오기 위해 @import를 사용하기도 함
 	예) @import ulr("경로 및 css파일명");

CSS 선택자(selector)
 - 스타일을 적용할 대상이나 범위를 지정하는 명령어
 - 선택자가 겹칠 경우에는 작은 범위의 선택자가 우선적으로 실행됨

1. 전체선택자
 - 선택자 부분에 '*'를 사용하면 모든 요소(태그)에 대해 스타일이 적용되며, '유니버셜 선택자'라고도 함
 - 문법 : * { 속성명:값; ... }
 	예 * { color:blue; }		/* 모든 태그안의 글자색을 파랑으로 지정 */
	일반적으로 전체 선택자는 거의 사용되지 않고, 초반 설정용으로 주로 사용됨

2. type 선택자
 - 태그명을 선택자로 사용하는 것을 'type 선택자' 또는 '요소, 태그 선택자'라고 함
 - 문법 : 태그명 { 속성명:값; ... }
	예) p { color:blue; }	/* 모든 p태그안의 글자색을 파랑으로 지정 */
 - type 선택자는 지정한 태그에 대해 모두 스타일 적용하므로 생각보다 적용범위가 넓음
 	전체 선택자와 비슷하게 사용빈도가 높지 않고, 초반 설정용으로 주로 사용됨
	가장 많이 사용되는 곳은 기본 기능을 가진 태그들의 기능을 없애는 용도로 사용됨(a, ol, ul, strong, em 등의 태그)

3. class 선택자
 - 요소에 class 속성을 지정한 경우 해당 class명을 선택자로 사용하는 것
 - class는 요소이 종류에 상관없이 가튼 이름으로 여러 요소들을 지정할 수 있으므로 특정 성격을 지닌 그룹으로 스타일을 지정할 때 많이 사용
 - 한 페이지에서 같은 이름의 class를 여러 개 지정할 수 있고, 한 요소에 여러 개의 class명을 띄어쓰기로 구분하여 지정할 수도 있음
 - 문법 : .class명 { 속성명:값; ... }	/* 점(.)으로 class 선택자라는 것을 표시함 */
 	예) .note { color:black; }		/* note라는 class속성을 가진 요소들의 글자색을 검정으로 지정 */
 - 각기 다른 요소여도 class명이 같으면 class명을 통해 그룹화가 가능하기 때문에 자주 사용됨

4. id 선택자
 - 요소에 id 속성을 지정한 경우 해당 id명을 선택자로 사용하는 것
 - class와 비슷하나 class와는 다르게 id는 한 페이지 내에서 유일한 이름을 가져야 함
 	단, html 특성상 동일한 id명이 있어도 오류가 발생하지는 않아 개발자나 퍼블리셔가 알아서 id명을 중복하지 않도록 주의해야 함
 - 문법 : #id명 { 속성명:값; ... }		/* 샾(#)으로 id 선택자라는 것을 표시함 */
 	예) #note { color:black; }		/* note라는 id속성을 가진 요소들의 글자색을 검정으로 지정 */

5. 속성 선택자
 - 요소에서 특정 속성의 값을 기준으로 선택 범위를 지정하는 방식
 - 문법
 	요소명[속성명] : 특정 요소에서 지정한 속성을 사용한 경우
	예) a[target] : a태그들 중 target 속성을 사용한 a태그들에만 스타일 적용

	요소명[속성명^="값"] : 특정 요소에서 지정한 속성에 지정한 값을 사용한 경우
	예) a[href^="http"] : a태그들 중 href 속성의 값으로 "http"로 시작하는 a태그들에만 스타일 적용
	
	요소명[속성명*="값"] : 특정 요소에서 지정한 속성에 지정한 값을 포함하는 경우
	예) a[href*="www"] : a태그들 중 href 속성의 값에 "www"가 들어있는 a태그들에만 스타일 적용